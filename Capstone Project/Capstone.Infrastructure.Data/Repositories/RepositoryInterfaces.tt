<#@ template debug="false" hostspecific="true" language="C#"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>

<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\EF\Entities.edmx";
string namespaceName = code.VsNamespaceSuggestion();


EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

WriteHeader(fileManager, "Capstone.Infrastructure.Data.Interface", "Capstone.Infrastructure.Data.EF.Entities");

foreach ( var i in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name)) {
	fileManager.StartNewFile("I" + i.Name + "Repository.cs");
	BeginNamespace(namespaceName, code);
#>
<#=Accessibility.ForType(i)#> <#=code.SpaceAfter(code.AbstractOption(i))#>interface <#=code.Escape("I" + i.Name + "Repository")#> : IRepository<<#=code.Escape(i)#>> {
	
	
}
<# 
	EndNamespace(namespaceName); 
}

fileManager.Process();
#>

<#+
void WriteHeader (EntityFrameworkTemplateFileManager fileManager, params string[] additionalNamespaces) {
	fileManager.StartHeader();
#>
// --------------------------------------------
// <auto-generated>
//	  This code was generated from a template
// </auto-generated>
// --------------------------------------------

using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
<#=String.Join(String.Empty, additionalNamespaces.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
	fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#> {
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

#>