<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

EntityFrameworkTemplateFileManager  fileManager = EntityFrameworkTemplateFileManager .Create(this);

string inputFile = @"Entities.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

//Added extra usings 
WriteHeader(fileManager, "Capstone.Infrastructure.Data.EF.Entities");
BeginNamespace(namespaceName, code);

#>

///<sumary>
///Base contract for context in Main Module 
///</sumary>
<#=Accessibility.ForType(container)#> interface IUnitOfWork 
{
	/// <summary>
    /// Creates an object set for a type
    /// </summary>
    /// <typeparam name="TEntity">Type of elements in object set</typeparam>
    /// <returns>Object set of type TEntity</returns>
    IDbSet<TEntity> CreateSet<TEntity>() where TEntity : class;

    /// <summary>
    /// Commits changes made to the container
    /// </summary>
    void Commit();

    /// <summary>
    /// Commits changes made to the container
    /// </summary>
    void CommitAndRefreshChanges();

    /// <summary>
    /// Rolls back changes not committed to the DB
    /// </summary>
    void RollbackChanges();

    void Attach<TEntity>(TEntity item) where TEntity : class;

    void SetModified<TEntity>(TEntity item) where TEntity : class;

    void ApplyCurrentValues<TEntity>(TEntity item) where TEntity : class;
   
<#
    region.Begin("ObjectSet Properties", 2);

    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>

    IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>{ get; }
    
<#
    }

    region.End(1);
	


#>

	

}
<#
	PopIndent();
	#>
}
	
<#+
private void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Data.Entity;


<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string AccessibilityAndVirtual(string accessibility)
{
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}
#>

<#+
void WriteApplyChanges(CodeGenerationTools code)
{
#>
<#+
}
#>
