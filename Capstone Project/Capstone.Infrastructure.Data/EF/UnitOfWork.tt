<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

EntityFrameworkTemplateFileManager  fileManager = EntityFrameworkTemplateFileManager .Create(this);

string inputFile = @"Entities.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

//Added extra usings 
WriteHeader(fileManager,"Capstone.Infrastructure.Data.EF.Entities", "System.Reflection", "System.Data.Entity.Infrastructure", "System.Data.Entity");
BeginNamespace(namespaceName, code);

#>
[System.Diagnostics.DebuggerNonUserCode()]
<#=Accessibility.ForType(container)#> partial class <#=code.Escape("UnitOfWork")#> : DbContext, IUnitOfWork
{
    public const string ConnectionString = "name=<#=container.Name#>";
    public const string ContainerName = "<#=container.Name#>";

    #region Constructors
	
    public <#=code.Escape("UnitOfWork")#>()
        : base(ConnectionString)
    {
        Initialize();
    }

    public <#=code.Escape("UnitOfWork")#>(string connectionString)
        : base(connectionString)
    {
        Initialize();
    }


    private void Initialize()
    {
    }

    #endregion
<#
		region.Begin("IMainModuleUnitOfWork",2);
#>
	
	public  IDbSet<TEntity> CreateSet<TEntity>() 
    	where TEntity : class
    {
           return base.Set<TEntity>();
    }
	public void Attach<TEntity>(TEntity item)
           where TEntity : class
    {
       base.Entry<TEntity>(item).State = EntityState.Unchanged;
    }
	public void SetModified<TEntity>(TEntity item)
         where TEntity : class
    {
        base.Entry<TEntity>(item).State = EntityState.Modified;
    }

    public void ApplyCurrentValues<TEntity>(TEntity item)
        where TEntity : class
    {
        base.Entry<TEntity>(item).CurrentValues.SetValues(item);
    }


    public void CommitAndRefreshChanges()
    {
        bool saveFailed = false;

        do
        {
            try
            {
                base.SaveChanges();

                saveFailed = false;

            }
            catch (DbUpdateConcurrencyException ex)
            {
                saveFailed = true;

                ex.Entries.ToList()
                            .ForEach(entry =>
                            {
                                entry.OriginalValues.SetValues(entry.GetDatabaseValues());
                            });

            }
        } while (saveFailed);
    }
    public  void Commit()
    {
    	//Default option is DetectChangesBeforeSave
    	base.SaveChanges();
    		
    }
    public void RollbackChanges()
    {
        base.ChangeTracker.Entries().ToList()
            .ForEach(entry => entry.State = EntityState.Unchanged);
    }
    public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
    {
        return base.Database.SqlQuery<TEntity>(sqlQuery, parameters);
    }
    
    public int ExecuteCommand(string sqlCommand, params object[] parameters)
    {
        return base.Database.ExecuteSqlCommand(sqlCommand, parameters);
    }
	
<#
		region.End();
#>
<#
    region.Begin("ObjectSet Properties", 1);

    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>

    <#=Accessibility.ForReadOnlyProperty(entitySet)#> IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>
    {
        get { return <#=code.FieldName(entitySet) #>  ?? (<#=code.FieldName(entitySet)#> = CreateSet<<#=code.Escape(entitySet.ElementType)#>>()); }
    }
    private IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.FieldName(entitySet)#>;
<#
        }

        region.End();

        region.Begin("Function Imports");

        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            var parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            if (edmFunction.ReturnParameter == null)
            {
                continue;
            }
            string returnTypeElement = code.Escape(ef.GetElementType(edmFunction.ReturnParameter.TypeUsage));

#>
    <#=AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction))#> ObjectResult<<#=returnTypeElement#>> <#=code.Escape(edmFunction)#>(<#=paramList#>)
    {
<#
            foreach (var parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                {
                    continue;
                }
#>

        ObjectParameter <#=parameter.LocalVariableName#>;

        if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
        }
        else
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
        }
<#
            }
#>
        return base.ExecuteFunction<<#=returnTypeElement#>>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))#>);
    }
<#
        }
        region.End();
#>
}

<#
    EndNamespace(namespaceName);

    fileManager.StartNewFile(Path.GetFileNameWithoutExtension(Host.TemplateFile) + ".Extensions.cs");
    BeginNamespace(namespaceName, code);
    WriteApplyChanges(code);
    EndNamespace(namespaceName);

    fileManager.Process();
#>
<#+
private void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;



<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string AccessibilityAndVirtual(string accessibility)
{
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}
#>

<#+
void WriteApplyChanges(CodeGenerationTools code)
{
#>
<#+
}
#>
