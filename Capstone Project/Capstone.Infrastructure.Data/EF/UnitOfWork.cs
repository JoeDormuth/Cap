//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;



using Capstone.Infrastructure.Data.EF.Entities;
using System.Reflection;
using System.Data.Entity.Infrastructure;
using System.Data.Entity;

namespace Capstone.Infrastructure.Data.EF
{
    [System.Diagnostics.DebuggerNonUserCode()]
    public partial class UnitOfWork : DbContext, IUnitOfWork
    {
        public const string ConnectionString = "name=EntitiesContainer";
        public const string ContainerName = "EntitiesContainer";
    
        #region Constructors
    	
        public UnitOfWork()
            : base(ConnectionString)
        {
            Initialize();
        }
    
        public UnitOfWork(string connectionString)
            : base(connectionString)
        {
            Initialize();
        }
    
    
        private void Initialize()
        {
        }
    
        #endregion
        #region IMainModuleUnitOfWork
    	
    	public  IDbSet<TEntity> CreateSet<TEntity>() 
        	where TEntity : class
        {
               return base.Set<TEntity>();
        }
    	public void Attach<TEntity>(TEntity item)
               where TEntity : class
        {
           base.Entry<TEntity>(item).State = EntityState.Unchanged;
        }
    	public void SetModified<TEntity>(TEntity item)
             where TEntity : class
        {
            base.Entry<TEntity>(item).State = EntityState.Modified;
        }
    
        public void ApplyCurrentValues<TEntity>(TEntity item)
            where TEntity : class
        {
            base.Entry<TEntity>(item).CurrentValues.SetValues(item);
        }
    
    
        public void CommitAndRefreshChanges()
        {
            bool saveFailed = false;
    
            do
            {
                try
                {
                    base.SaveChanges();
    
                    saveFailed = false;
    
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    saveFailed = true;
    
                    ex.Entries.ToList()
                                .ForEach(entry =>
                                {
                                    entry.OriginalValues.SetValues(entry.GetDatabaseValues());
                                });
    
                }
            } while (saveFailed);
        }
        public  void Commit()
        {
        	//Default option is DetectChangesBeforeSave
        	base.SaveChanges();
        		
        }
        public void RollbackChanges()
        {
            base.ChangeTracker.Entries().ToList()
                .ForEach(entry => entry.State = EntityState.Unchanged);
        }
        public IEnumerable<TEntity> ExecuteQuery<TEntity>(string sqlQuery, params object[] parameters)
        {
            return base.Database.SqlQuery<TEntity>(sqlQuery, parameters);
        }
        
        public int ExecuteCommand(string sqlCommand, params object[] parameters)
        {
            return base.Database.ExecuteSqlCommand(sqlCommand, parameters);
        }
    	

        #endregion

        #region ObjectSet Properties
    
        public IDbSet<aspnet_Applications> aspnet_Applications
        {
            get { return _aspnet_Applications  ?? (_aspnet_Applications = CreateSet<aspnet_Applications>()); }
        }
        private IDbSet<aspnet_Applications> _aspnet_Applications;
    
        public IDbSet<aspnet_Membership> aspnet_Membership
        {
            get { return _aspnet_Membership  ?? (_aspnet_Membership = CreateSet<aspnet_Membership>()); }
        }
        private IDbSet<aspnet_Membership> _aspnet_Membership;
    
        public IDbSet<aspnet_Paths> aspnet_Paths
        {
            get { return _aspnet_Paths  ?? (_aspnet_Paths = CreateSet<aspnet_Paths>()); }
        }
        private IDbSet<aspnet_Paths> _aspnet_Paths;
    
        public IDbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers
        {
            get { return _aspnet_PersonalizationAllUsers  ?? (_aspnet_PersonalizationAllUsers = CreateSet<aspnet_PersonalizationAllUsers>()); }
        }
        private IDbSet<aspnet_PersonalizationAllUsers> _aspnet_PersonalizationAllUsers;
    
        public IDbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser
        {
            get { return _aspnet_PersonalizationPerUser  ?? (_aspnet_PersonalizationPerUser = CreateSet<aspnet_PersonalizationPerUser>()); }
        }
        private IDbSet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUser;
    
        public IDbSet<aspnet_Profile> aspnet_Profile
        {
            get { return _aspnet_Profile  ?? (_aspnet_Profile = CreateSet<aspnet_Profile>()); }
        }
        private IDbSet<aspnet_Profile> _aspnet_Profile;
    
        public IDbSet<aspnet_Roles> aspnet_Roles
        {
            get { return _aspnet_Roles  ?? (_aspnet_Roles = CreateSet<aspnet_Roles>()); }
        }
        private IDbSet<aspnet_Roles> _aspnet_Roles;
    
        public IDbSet<aspnet_SchemaVersions> aspnet_SchemaVersions
        {
            get { return _aspnet_SchemaVersions  ?? (_aspnet_SchemaVersions = CreateSet<aspnet_SchemaVersions>()); }
        }
        private IDbSet<aspnet_SchemaVersions> _aspnet_SchemaVersions;
    
        public IDbSet<aspnet_Users> aspnet_Users
        {
            get { return _aspnet_Users  ?? (_aspnet_Users = CreateSet<aspnet_Users>()); }
        }
        private IDbSet<aspnet_Users> _aspnet_Users;
    
        public IDbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events
        {
            get { return _aspnet_WebEvent_Events  ?? (_aspnet_WebEvent_Events = CreateSet<aspnet_WebEvent_Events>()); }
        }
        private IDbSet<aspnet_WebEvent_Events> _aspnet_WebEvent_Events;
    
        public IDbSet<Features_Bugs> Features_Bugs
        {
            get { return _features_Bugs  ?? (_features_Bugs = CreateSet<Features_Bugs>()); }
        }
        private IDbSet<Features_Bugs> _features_Bugs;
    
        public IDbSet<PermissionCategory> PermissionCategories
        {
            get { return _permissionCategories  ?? (_permissionCategories = CreateSet<PermissionCategory>()); }
        }
        private IDbSet<PermissionCategory> _permissionCategories;
    
        public IDbSet<Permission> Permissions
        {
            get { return _permissions  ?? (_permissions = CreateSet<Permission>()); }
        }
        private IDbSet<Permission> _permissions;
    
        public IDbSet<Project> Projects
        {
            get { return _projects  ?? (_projects = CreateSet<Project>()); }
        }
        private IDbSet<Project> _projects;
    
        public IDbSet<ProjectBacklog> ProjectBacklogs
        {
            get { return _projectBacklogs  ?? (_projectBacklogs = CreateSet<ProjectBacklog>()); }
        }
        private IDbSet<ProjectBacklog> _projectBacklogs;
    
        public IDbSet<ReleaseBacklog> ReleaseBacklogs
        {
            get { return _releaseBacklogs  ?? (_releaseBacklogs = CreateSet<ReleaseBacklog>()); }
        }
        private IDbSet<ReleaseBacklog> _releaseBacklogs;
    
        public IDbSet<Sprint> Sprints
        {
            get { return _sprints  ?? (_sprints = CreateSet<Sprint>()); }
        }
        private IDbSet<Sprint> _sprints;
    
        public IDbSet<sysdiagram> sysdiagrams
        {
            get { return _sysdiagrams  ?? (_sysdiagrams = CreateSet<sysdiagram>()); }
        }
        private IDbSet<sysdiagram> _sysdiagrams;
    
        public IDbSet<UserProjectPermission> UserProjectPermissions
        {
            get { return _userProjectPermissions  ?? (_userProjectPermissions = CreateSet<UserProjectPermission>()); }
        }
        private IDbSet<UserProjectPermission> _userProjectPermissions;

        #endregion

    }
    
}
